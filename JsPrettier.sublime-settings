{
	//
	// @prettier_cli_path { string | default = "" }
	//
	// It's strongly recommended to leave the "prettier_cli_path" value
	// empty "". However, if Sublime Text has problems resolving the path
	// to the `prettier` cli executable, you can explicitly specify the
	// full path here.
	//
	// Examples:
	//
	//     - macOS/Linux...: "/path/to/node_modules/.bin/prettier"
	//     - Windows.......: "C:/path/to/npm/prettier"

	"prettier_cli_path": "",

	//
	// @node_path { string | default = "" }
	//
	// It's strongly recommended to leave the "node_path" value
	// empty "". However, if Sublime Text has problems resolving the path
	// to `node`, you can explicitly specify the full path here.
	//
	// Examples:
	//
	//     - macOS/Linux...: "/path/to/node"
	//     - Windows.......: "C:/path/to/node.exe"

	"node_path": "",

	//
	// @auto_format_on_save { bool | default = false }
	//
	// Run js_prettier command automatically
	// when JavaScript files are saved.

	"auto_format_on_save": false,

	//
	// @allow_inline_formatting { bool | default = false }
	//
	// Enables the ability to format "selections" of in-lined JavaScript code,
	// outside of the normal JavaScript syntax. For example, to format a
	// selection of JavaScript code within a PHP or HTML file. When `true`, the
	// JsPrettier command is available for use across all Sublime Text syntaxes.

	"allow_inline_formatting": false,

	//
	// For a complete list of supported options and acceptable values,
	// please reference the `prettier` documentation at https://github.com/jlongster/prettier

	"prettier_options": {

		// Fit code within this line limit
		"printWidth": 80,

		// If true, will use single instead of double quotes
		"singleQuote": false,

		// Controls the printing of trailing commas wherever possible.
		//
		// Valid options:
		//
		// "none" - No trailing commas
		// "es5"  - Trailing commas where valid in ES5 (objects, arrays, etc)
		// "all"  - Trailing commas wherever possible (function arguments)
		"trailingComma": "none",

		// Controls the printing of spaces inside array and objects
		"bracketSpacing": true,

		// If true, puts the `>` of a multi-line jsx element at the end of
		// the last line instead of being alone on the next line
		"jsxBracketSameLine": false,

		// Which parser to use. Valid options are "flow" and "babylon"
		"parser": "babylon"

	}
}
